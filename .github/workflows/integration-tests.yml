# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Integration test suite

on:
  push:
    branches: [ "main", "feat/**" ]
  pull_request:
    branches: [ "main", "feat/**" ]

jobs:
  maven-build-cache:
    name: Build with Maven and cache dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          cache-dependency-path: ./pom.xml
      - name: Cache Maven dependencies for the ors maven project
        run: |
          echo "Caching the maven dependencies"
          mvn -pl ors-test-scenarios package -B dependency:go-offline -q
  first-pass-image-cache:
    name: Build the Docker image cache for the first time
    runs-on: ubuntu-latest
    needs:
      - maven-build-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          install: true
      - name: Cache image ors-test-scenarios-maven-bare
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: false
          tags: ors-test-scenarios-maven-bare:latest
          file: ors-test-scenarios/src/test/resources/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
  second-pass-image-cache:
    name: Build the Docker image cache for the second time
    runs-on: ubuntu-latest
    needs:
      - maven-build-cache
      - first-pass-image-cache
    strategy:
      matrix:
        docker_image: [ 'ors-test-scenarios-maven-bare', 'ors-test-scenarios-war-bare','ors-test-scenarios-jar-bare','ors-test-scenarios-maven','ors-test-scenarios-war','ors-test-scenarios-jar' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          install: true
      - name: Cache images
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: false
          tags: ${{ matrix.docker_image }}:latest
          file: ors-test-scenarios/src/test/resources/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Export to build artifacts
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ors-test-scenarios/src/test/resources/Dockerfile
          tags: ${{ matrix.docker_image }}:latest
          outputs: type=oci,dest=/tmp/${{ matrix.docker_image }}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.docker_image }}
          path: /tmp/${{ matrix.docker_image }}.tar
          overwrite: true
  ors-test-scenarios:
    name: Run the ors-test-scenarios integration tests
    runs-on: ubuntu-latest
    needs:
      - maven-build-cache
      - second-pass-image-cache
    strategy:
      matrix:
        test_class: [ 'ConfigEnvironmentTest','ConfigFileTest','ConfigLookupTest','GeoToolsTest','GraphRepoTest' ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          cache-dependency-path: ./pom.xml
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          install: true
      - name: Download all artifact
        uses: actions/download-artifact@v4
        with:
          # glob pattern to match all files in the artifact
          pattern: 'ors-test-scenarios-*.tar'
          path: /tmp/
          merge-multiple: true
      - name: Load the Docker images
        run: |
          # Iterate over all files in the directory /tmp with the pattern ors-test-scenarios-*.tar
          for file in /tmp/ors-test-scenarios-*.tar; do
              echo "Loading image from $file"
              docker load -i $file
          done
          # List all images
          docker image ls -a
      - name: Run integration tests
        run: |
          echo "Running integration tests ${{ matrix.test_class }}"
          mvn -pl ors-test-scenarios test -Dtest=${{ matrix.test_class }}