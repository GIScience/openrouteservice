# To execute this script locally, see the run.sh in the same folder
FROM docker.io/debian:bookworm-slim as builder
RUN apt-get update -y && \
    apt-get install -y openjdk-17-jdk-headless maven

ARG WORK_DIR=/home/ors/openrouteservice

WORKDIR $WORK_DIR

# Copy the project files into the container
COPY ors-api ors-api
COPY ors-engine ors-engine
COPY ors-report-aggregation ors-report-aggregation
COPY pom.xml pom.xml
COPY .integration-scenarios/debian-12-jar-mvn/files/config-car-hgv-whe.yml ors-config.yml

# Build the project
RUN mvn -B clean package -DskipTests -PbuildFatJar -DCI=true
RUN java -jar ors-api/target/ors.jar --ors.engine.preparation_mode=true



FROM docker.io/debian:bookworm-slim as final

RUN apt-get update -y && \
    apt-get install -y openjdk-17-jdk-headless


#ARG WORK_DIR=/home/ors/openrouteservice
ARG CONF_DIR_USER=/root/.config/openrouteservice
ARG CONF_DIR_ETC=/etc/openrouteservice
#ARG TESTFILES_DIR=/testfiles
#ARG TESTSUITES_DIR=/testsuites
#ARG UID=1000
#ARG GID=1000
ARG WORK_DIR=/home/ors/openrouteservice

WORKDIR $WORK_DIR

# Copy the jar file from the builder stage
COPY --from=builder $WORK_DIR/ors-api/target/ors.jar ors.jar
COPY --from=builder $WORK_DIR/graphs graphs

#COPY .integration-scenarios/debian-12-jar-mvn/testfiles $TESTFILES_DIR
#COPY .integration-scenarios/debian-12-jar-mvn/testsuites $TESTSUITES_DIR
#COPY ors-api $WORK_DIR/ors-api
#COPY ors-engine $WORK_DIR/ors-engine
#COPY ors-report-aggregation $WORK_DIR/ors-report-aggregation
#COPY pom.xml $WORK_DIR/pom.xml


#COPY --from=builder /app/ors-api/src/test/resources/application-test.yml /ors-config.yml
#COPY --from=builder /app/ors-api/src/test/files $WORK_DIR/files

RUN #mkdir -p "$WORK_DIR/graphs"
RUN mkdir -p "$CONF_DIR_USER"
RUN mkdir -p "$CONF_DIR_ETC"
#RUN mkdir -p "$TESTFILES_DIR"
#RUN mkdir -p "$TESTSUITES_DIR"
RUN chmod -R 770 "$WORK_DIR"
RUN chmod -R 770 "$CONF_DIR_USER"
RUN chmod -R 770 "$CONF_DIR_ETC"
#RUN chmod -R 770 "$TESTFILES_DIR"
#RUN chmod -R 770 "$TESTSUITES_DIR"

ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
#ENV WORK_DIR=$WORK_DIR
#ENV CONF_DIR_USER=$CONF_DIR_USER
#ENV CONF_DIR_ETC=$CONF_DIR_ETC
#ENV TESTFILES_DIR=$TESTFILES_DIR
#ENV TESTSUITES_DIR=$TESTSUITES_DIR

# Expose ports
EXPOSE 8082
# Start systemd with the following command
ENTRYPOINT [ "java", "-jar", "ors.jar" ]
#CMD [ "test-find-config-workdir.sh" ]